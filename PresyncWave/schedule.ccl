# Schedule definitions for thorn PresyncWave
storage: rhs_vars[3], evo_vars[3], evo_divs, wave_energy[3]

schedule presync_wave_init at CCTK_POSTINITIAL
{
  LANG: C
  READS: Grid::coordinates(interior)
  WRITES: PresyncWave::evo_vars(interior)
  SYNC: PresyncWave::evo_vars
} "initial condition"

schedule presync_wave_evolve in MoL_CalcRHS
{
  LANG: C
  READS: PresyncWave::evo_divs(interior), phi
  WRITES: PresyncWave::rhs_vars(interior)
  SYNC: PresyncWave::rhs_vars
} "Evolve loop"

schedule presync_derivatives in MoL_CalcRHS before presync_wave_evolve
{
  LANG: C
  READS: PresyncWave::evo_vars(everywhere)
  WRITES: PresyncWave::evo_divs(interior)
} "Compute derivatives"

schedule presync_registervars in MoL_Register
{
  LANG: C
  OPTIONS: META
}"Register funwave variables for MoL"

#################################################
##             Boundary Routines               ##
#################################################

# In this function, we register boundary conditions
# with Carpet (not thorn Boundary). This new way
# of doing things makes it possible for Carpet to
# fill in the exterior of the variable at the
# same time it performs a sync.
if(CCTK_ParameterValInt("use_psync","Carpet") == 1) {
  schedule presync_registerboundary in PreSync_Registration
  {
    LANG: C
  } "register boundaries"

  schedule presync_SelectBCs in PreSync_Selection
  {
    LANG: C
  } "select boundary conditions"

  schedule energy_SelectBCs in PreSync_Selection
  {
    LANG: C
  } "select boundary conditions"
}

if(CCTK_ParameterValInt("use_psync","Carpet") == 0) {
  schedule group PSWave_Boundaries in MoL_CalcRHS before presync_derivatives
  {
  } "boundary condition group"
  schedule group PSWave_Boundaries in CCTK_ANALYSIS before presync_energy
  {
  } "boundary condition group"

  schedule group PSWave_Boundaries at POSTRESTRICT
  {
  } "boundary condition group"

  schedule presync_registerboundary at CCTK_WRAGH
  {
    LANG: C
  } "register boundaries"

  schedule presync_SelectBCs in PSWave_Boundaries
  {
    LANG: C
  } "select boundary conditions"

  schedule GROUP ApplyBCs as PSWave_ApplyBCs in PSWave_Boundaries after presync_selectBCs
  {
  } "Apply boundary conditions"

  schedule group Energy_Boundary at CCTK_ANALYSIS after presync_energy
  {
  } "boundary condition group"

  schedule energy_SelectBCs in Energy_Boundary
  {
    LANG: C
  } "select boundary conditions"

  schedule GROUP ApplyBCs as Energy_ApplyBCs in Energy_Boundary after energy_SelectBCs
  {
  } "Apply boundary conditions"
}

#################################################
##            Energy Calculations              ##
#################################################

schedule presync_energy at CCTK_ANALYSIS
{
  LANG: C
  READS: PresyncWave::evo_vars(everywhere)
  WRITES: PresyncWave::energy(interior)
  SYNC: PresyncWave::wave_energy
} "Calculate energy"
