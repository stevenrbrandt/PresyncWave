# Schedule definitions for thorn PresyncWave
storage: rhs_vars[3], evo_vars[3], evo_divs, wave_energy

# In this step, we register boundary conditions
# with Carpet (not thorn Boundary). This new way
# of doing things makes it possible for Carpet to
# fill in the exterior of the variable at the
# same time it performs a sync.
schedule presync_registerboundary at CCTK_INITIAL
{
  LANG: C
} "register boundaries"

schedule presync_wave_init at CCTK_POSTINITIAL
{
  LANG: C
  READS: Grid::coordinates(everywhere)
  WRITES: PresyncWave::evo_vars(everywhere)
} "initial condition"

schedule presync_wave_evolve in MoL_CalcRHS
{
  READS: PresyncWave::evo_divs(interior), evo_vars
  WRITES: PresyncWave::rhs_vars(interior)
  LANG: C
} "Evolve loop"

schedule presync_derivatives in MoL_CalcRHS before presync_wave_evolve
{
  READS: PresyncWave::psi(everywhere)
  WRITES: PresyncWave::evo_divs(interior)
  LANG: C
} "Compute derivatives"

schedule presync_registervars in MoL_Register
{
  LANG: C
  OPTIONS: META
}"Register funwave variables for MoL"

schedule presync_energy in CCTK_ANALYSIS
{
  READS: PresyncWave::evo_vars(everywhere)
  WRITES: PresyncWave::energy(interior)
  LANG: C
} "Calculate energy"

schedule presync_energy in CCTK_POSTINITIAL after presync_wave_init
{
  READS: PresyncWave::evo_vars(everywhere)
  WRITES: PresyncWave::energy(interior)
  LANG: C
} "Calculate energy"
